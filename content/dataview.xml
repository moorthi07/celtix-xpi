<?xml version="1.0"?>

<!--
/* ***** BEGIN LICENCE BLOCK *****
 * Version: CePL 1.1
 * 
 * The contents of this file are subject to the Celtx Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.celtx.com/CePL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Celtx Script Manager.
 * 
 * The Initial Developer of the Original Code is Chad House and 4067479
 * Canada Inc. t/a CELTX.
 * 
 * Portions created by Chad House are Copyright (C) 2000-2004 Chad House,
 * parts created by Celtx are Copyright (C) 4067479 Canada Inc. All Rights
 * Reserved.
 * 
 * Contributor(s):
 *
 ***** END LICENCE BLOCK ***** */
-->

<!DOCTYPE bindings [
<!ENTITY % browserDTD SYSTEM "chrome://browser/locale/browser.dtd" >
%browserDTD;
<!ENTITY % editMenuDTD SYSTEM "chrome://global/locale/editMenuOverlay.dtd" >
%editMenuDTD;
<!ENTITY % bindingsDTD SYSTEM "chrome://celtx/locale/celtx.dtd" >
%bindingsDTD;
]>

<bindings id="celtx-dataview-bindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:html="http://www.w3.org/1999/xhtml">

  <binding id="character-panel">

    <content>
      <xul:iframe anonid="frame"
                  flex="1"
                  src="chrome://celtx/content/characternav.xul"/>
    </content>

    <implementation>

      <field name="_onSelect"/>

      <property name="onSelect"
                onget="return this._onSelect;"
                onset="this._onSelect = val; return val;"/>

      <property name="frame" readonly="true"
                onget="return document.getAnonymousNodes(this)[0]"/>

      <property name="list" readonly="true"
                onget="return this.frame.contentDocument.getElementById('list')"/>

      <method name="init">
        <body>
        </body>
      </method>

      <method name="itemSelected">
        <body>
        <![CDATA[
          if (this.onSelect) this.onSelect();
        ]]>
        </body>
      </method>

      <method name="deleteItem">
        <body>
        <![CDATA[
          var list = this.list;
          var item = list.selectedItem;
          if (! item) return;

          var ps = getPromptService();
          var sb = document.getElementById("celtx-bundle");
          var rv = ps.confirm(window, sb.getString("ConfirmDelete"),
                              sb.getString("ConfirmDeleteCharacter"));
          if (! rv) return;

          var uri  = item.id;
          var name = item.label;
          var idx  = list.selectedIndex;
          var cnt  = list.getRowCount();
          var sel  = cnt > 1 ? (idx + 1) % cnt : -1;
          list.selectedIndex = sel;

          top.deleteResource(uri);
        ]]>
        </body>
      </method>

      <method name="addItem">
        <body>
        <![CDATA[
          var ps = getPromptService();
          var sb = document.getElementById("celtx-bundle");
          var name = {};
          // XXX Need i18n
          var rv = ps.prompt(window, sb.getString("AddCharacter"),
                             sb.getString("CharacterNamePrompt"),
                             name, null, {}); 
          if (! rv || name.value == '') return;
          try {
            var s = name.value.toUpperCase();
            var p = top.gProjWin.project;
            var typeURI = Cx.NS_CX + 'Cast';
            var uri = p.add({ type: typeURI, title: s });
            p.model.add(RES(uri), RES(Cx.NS_CX  + 'scriptName'), LIT(s));
            top.autotext.chars[s] = 1;
            this.selectByURI(uri);
          }
          catch (ex) {
            dump("addItem: " + ex + "\n");
          }
        ]]>
        </body>
      </method>

      <method name="selectByURI">
        <parameter name="uri"/>
        <body>
        <![CDATA[
          try {
            var item, el;
            var cnt = this.list.getRowCount();
            for (var i = 0; i < cnt; i++) {
              el = this.list.getItemAtIndex(i);
              if (el.id == uri) {
                item = el;
                break;
              }
            }
            if (! item) throw "not found " + uri;
            this.list.ensureElementIsVisible(item);
            this.list.selectItem(item);
          }
          catch (ex) {
            dump("selectByURI: " + ex + "\n");
          }
        ]]>
        </body>
      </method>

    </implementation>

    <handlers>
      <handler event="frameloaded"   action="this.init()"/>
      <handler event="addclicked"    action="this.addItem()"/>
      <handler event="deleteclicked" action="this.deleteItem()"/>
      <handler event="itemselected"  action="this.itemSelected()"/>
    </handlers>

  </binding>

  <binding id="character-view"
           extends="chrome://celtx/content/docview.xml#document-view">

    <content>
      <xul:iframe anonid="frame"
                  flex="1"
                  src="chrome://celtx/content/character.xul"/>
    </content>

    <implementation>

      <field name="ready">false</field>

      <property name="allowSidebar" readonly="true" onget="return false"/>

      <property name="frame" readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'frame')"/>
      <property name="tabPanel" readonly="true"
                onget="return this.frame.contentWindow.panel;"/>

      <method name="open">
        <parameter name="project"/>
        <parameter name="doc"/>
        <body>
        <![CDATA[
          this._editor = null;
          this._controller = {
            supportsCommand: function (cmd) {
              switch (cmd) {
                case "cmd-print":
                case "cmd-print-preview":
                  return true;
                default:
                  return false;
              }
            },
            isCommandEnabled: function (cmd) { return false; },
            doCommand: function (cmd) {}
          };
          this._project = project;
          this._document = doc;
        ]]>
        </body>
      </method>

      <method name="focus">
        <body>
        <![CDATA[
          window.controllers.insertControllerAt(0, this.controller);
          if (this._focusedElement) {
            this._focusedElement.focus();
          }
          if (this.ready) this.tabPanel.focused();
        ]]>
        </body>
      </method>

      <method name="blur">
        <body>
        <![CDATA[
          //if (this.inPrintPreview)
          //  PrintUtils.exitPrintPreview();
          this._focusedElement = document.commandDispatcher.focusedElement;
          window.controllers.removeController(this.controller);
        ]]>
        </body>
      </method>

      <method name="close">
        <body>
        <![CDATA[
          this.tabPanel.forceSave();
          return true;
        ]]>
        </body>
      </method>

      <method name="save">
        <body>
        <![CDATA[
          this.tabPanel.forceSave();
        ]]>
        </body>
      </method>

      <method name="print">
        <body>
        <![CDATA[
        // PrintUtils.print();
        ]]>
        </body>
      </method>

      <method name="printPreview">
        <body>
        <![CDATA[
        // PrintUtils.printPreview(null, null);
        ]]>
        </body>
      </method>

      <method name="panelLoaded">
        <body>
        <![CDATA[
        dump("--- panel-loaded\n");
        this.tabPanel.attach(this._project, this.navpanel);
        this.ready = true;
        ]]>
        </body>
      </method>

    </implementation>

    <handlers>
      <handler event="panelloaded" action="this.panelLoaded()"/>
    </handlers>

  </binding>


  <!-- Location -->

  <binding id="scenedet-panel">

    <content>
      <xul:iframe flex="1" src="chrome://celtx/content/scenedetnav.xul"/>
    </content>

    <implementation>

      <field name="_onSelect"/>

      <property name="onSelect"
                onget="return this._onSelect;"
                onset="this._onSelect = val; return val;"/>

      <property name="frame" readonly="true"
                onget="return document.getAnonymousNodes(this)[0]"/>

      <property name="list" readonly="true"
                onget="return this.frame.contentDocument.getElementById('list')"/>

      <method name="init">
        <body>
        </body>
      </method>

      <method name="itemSelected">
        <body>
        <![CDATA[
          if (this.onSelect) this.onSelect();
        ]]>
        </body>
      </method>

      <method name="selectByURI">
        <parameter name="uri"/>
        <body>
        <![CDATA[
          try {
            var item, el;
            var cnt = this.list.getRowCount();
            for (var i = 0; i < cnt; i++) {
              el = this.list.getItemAtIndex(i);
              if (el.id == uri) {
                item = el;
                break;
              }
            }
            if (! item) throw "not found " + uri;
            this.list.ensureElementIsVisible(item);
            this.list.selectItem(item);
          }
          catch (ex) {
            dump("selectByURI: " + ex + "\n");
          }
        ]]>
        </body>
      </method>

    </implementation>

    <handlers>
      <handler event="frameloaded"  action="this.init()"/>
      <handler event="itemselected" action="this.itemSelected()"/>
    </handlers>

  </binding>

  <binding id="scenedet-view"
           extends="chrome://celtx/content/docview.xml#document-view">

    <content>
      <xul:iframe anonid="frame"
                  flex="1"
                  src="chrome://celtx/content/scenedet.xul"/>
    </content>

    <implementation>

      <field name="ready">false</field>

      <property name="allowSidebar" readonly="true" onget="return false"/>

      <property name="frame" readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'frame')"/>
      <property name="tabPanel" readonly="true"
                onget="return this.frame.contentWindow.panel;"/>

      <method name="open">
        <parameter name="project"/>
        <parameter name="doc"/>
        <body>
        <![CDATA[
          this._editor = null;
          this._controller = {
            supportsCommand: function (cmd) {
              switch (cmd) {
                case "cmd-print":
                case "cmd-print-preview":
                  return true;
                default:
                  return false;
              }
            },
            isCommandEnabled: function (cmd) { return false; },
            doCommand: function (cmd) {}
          };
          this._project = project;
          this._document = doc;
        ]]>
        </body>
      </method>

      <method name="focus">
        <body>
        <![CDATA[
          window.controllers.insertControllerAt(0, this.controller);
          if (this._focusedElement) {
            this._focusedElement.focus();
          }
          if (this.ready) this.tabPanel.focused();
        ]]>
        </body>
      </method>

      <method name="blur">
        <body>
        <![CDATA[
          //if (this.inPrintPreview)
          //  PrintUtils.exitPrintPreview();
          this._focusedElement = document.commandDispatcher.focusedElement;
          window.controllers.removeController(this.controller);
        ]]>
        </body>
      </method>

      <method name="close">
        <body>
        <![CDATA[
          this.tabPanel.forceSave();
          return true;
        ]]>
        </body>
      </method>

      <method name="save">
        <body>
        <![CDATA[
          this.tabPanel.forceSave();
        ]]>
        </body>
      </method>

      <method name="print">
        <body>
        <![CDATA[
        // PrintUtils.print();
        ]]>
        </body>
      </method>

      <method name="printPreview">
        <body>
        <![CDATA[
        // PrintUtils.printPreview(null, null);
        ]]>
        </body>
      </method>

      <method name="panelLoaded">
        <body>
        <![CDATA[
        dump("--- panel-loaded\n");
        this.tabPanel.attach(this._project, this.navpanel);
        this.ready = true;
        ]]>
        </body>
      </method>

    </implementation>

    <handlers>
      <handler event="panelloaded" action="this.panelLoaded()"/>
    </handlers>

  </binding>


</bindings>